name: CI/CD Monitoring and Notifications

on:
  workflow_run:
    workflows: ["Continuous Integration", "Security and Code Quality", "Performance and Integration Testing", "Build and Release"]
    types: [completed]
  schedule:
    # Daily health check at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  issues: write
  pull-requests: write

jobs:
  # Monitor workflow health
  workflow-health:
    name: Workflow Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get workflow runs
        id: workflow-runs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            const healthData = {};
            
            for (const workflow of workflows.workflows) {
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow.id,
                per_page: 10
              });
              
              const recentRuns = runs.workflow_runs.slice(0, 10);
              const failureRate = recentRuns.filter(run => run.conclusion === 'failure').length / recentRuns.length;
              const avgDuration = recentRuns.reduce((sum, run) => {
                if (run.run_started_at && run.updated_at) {
                  const duration = new Date(run.updated_at) - new Date(run.run_started_at);
                  return sum + duration;
                }
                return sum;
              }, 0) / recentRuns.length;
              
              healthData[workflow.name] = {
                failure_rate: failureRate,
                avg_duration_minutes: Math.round(avgDuration / 60000),
                last_run_status: recentRuns[0]?.conclusion || 'unknown',
                last_run_date: recentRuns[0]?.created_at || 'unknown'
              };
            }
            
            core.setOutput('health-data', JSON.stringify(healthData));
            return healthData;

      - name: Generate health report
        run: |
          cat > workflow-health-report.md << 'EOF'
          # CI/CD Pipeline Health Report
          
          Generated on: $(date -u)
          
          ## Workflow Status Overview
          
          EOF
          
          echo '${{ steps.workflow-runs.outputs.health-data }}' | jq -r '
          to_entries[] | 
          "### " + .key + "\n" +
          "- **Last Run**: " + .value.last_run_status + " (" + .value.last_run_date + ")\n" +
          "- **Failure Rate**: " + (.value.failure_rate * 100 | round | tostring) + "%\n" +
          "- **Average Duration**: " + (.value.avg_duration_minutes | tostring) + " minutes\n"
          ' >> workflow-health-report.md

      - name: Check for issues
        id: health-check
        run: |
          ISSUES_FOUND=false
          
          # Check failure rates
          echo '${{ steps.workflow-runs.outputs.health-data }}' | jq -r '
          to_entries[] | 
          select(.value.failure_rate > 0.3) |
          .key + " has high failure rate: " + (.value.failure_rate * 100 | round | tostring) + "%"
          ' > high-failure-workflows.txt
          
          if [ -s high-failure-workflows.txt ]; then
            ISSUES_FOUND=true
            echo "High failure rate workflows found:"
            cat high-failure-workflows.txt
          fi
          
          # Check for long-running workflows
          echo '${{ steps.workflow-runs.outputs.health-data }}' | jq -r '
          to_entries[] | 
          select(.value.avg_duration_minutes > 30) |
          .key + " has long average duration: " + (.value.avg_duration_minutes | tostring) + " minutes"
          ' > slow-workflows.txt
          
          if [ -s slow-workflows.txt ]; then
            ISSUES_FOUND=true
            echo "Slow workflows found:"
            cat slow-workflows.txt
          fi
          
          echo "issues-found=$ISSUES_FOUND" >> $GITHUB_OUTPUT

      - name: Create issue for health problems
        if: steps.health-check.outputs.issues-found == 'true' && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let issueBody = '# CI/CD Pipeline Health Issues\n\n';
            issueBody += 'Automated health check detected issues with the CI/CD pipeline.\n\n';
            
            // Add high failure rate issues
            if (fs.existsSync('high-failure-workflows.txt')) {
              const highFailureContent = fs.readFileSync('high-failure-workflows.txt', 'utf8');
              if (highFailureContent.trim()) {
                issueBody += '## High Failure Rate Workflows\n\n';
                issueBody += highFailureContent + '\n\n';
              }
            }
            
            // Add slow workflow issues
            if (fs.existsSync('slow-workflows.txt')) {
              const slowWorkflowContent = fs.readFileSync('slow-workflows.txt', 'utf8');
              if (slowWorkflowContent.trim()) {
                issueBody += '## Slow Workflows\n\n';
                issueBody += slowWorkflowContent + '\n\n';
              }
            }
            
            issueBody += '## Recommended Actions\n\n';
            issueBody += '- Review failed workflow runs for common patterns\n';
            issueBody += '- Optimize slow workflows by improving caching or parallelization\n';
            issueBody += '- Consider splitting large workflows into smaller, focused ones\n';
            issueBody += '- Update dependencies that might be causing failures\n\n';
            issueBody += '_This issue was created automatically by the monitoring workflow._';
            
            // Check if similar issue already exists
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'ci-health',
              state: 'open'
            });
            
            if (issues.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'CI/CD Pipeline Health Issues Detected',
                body: issueBody,
                labels: ['ci-health', 'automated']
              });
            }

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: workflow-health-report
          path: workflow-health-report.md

  # Notify on workflow completion
  notify-completion:
    name: Workflow Completion Notification
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    steps:
      - name: Get workflow info
        id: workflow-info
        uses: actions/github-script@v7
        with:
          script: |
            const workflowRun = context.payload.workflow_run;
            const conclusion = workflowRun.conclusion;
            const workflowName = workflowRun.name;
            const branch = workflowRun.head_branch;
            const actor = workflowRun.actor.login;
            const runUrl = workflowRun.html_url;
            
            core.setOutput('conclusion', conclusion);
            core.setOutput('workflow-name', workflowName);
            core.setOutput('branch', branch);
            core.setOutput('actor', actor);
            core.setOutput('run-url', runUrl);
            
            return {
              conclusion,
              workflowName,
              branch,
              actor,
              runUrl
            };

      - name: Comment on PR for failures
        if: steps.workflow-info.outputs.conclusion == 'failure' && github.event.workflow_run.event == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const workflowName = '${{ steps.workflow-info.outputs.workflow-name }}';
            const runUrl = '${{ steps.workflow-info.outputs.run-url }}';
            const actor = '${{ steps.workflow-info.outputs.actor }}';
            
            // Get PR number from workflow run
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.payload.workflow_run.head_branch}`,
              state: 'open'
            });
            
            if (prs.length > 0) {
              const prNumber = prs[0].number;
              
              const comment = `## ‚ùå ${workflowName} Failed
              
              The **${workflowName}** workflow failed for this PR.
              
              **Details:**
              - **Triggered by:** @${actor}
              - **Branch:** \`${context.payload.workflow_run.head_branch}\`
              - **Run URL:** ${runUrl}
              
              Please review the workflow logs and fix any issues before merging.
              
              _This comment was posted automatically by the monitoring workflow._`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }

  # Generate CI/CD metrics
  generate-metrics:
    name: Generate CI/CD Metrics
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Collect metrics
        id: metrics
        uses: actions/github-script@v7
        with:
          script: |
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            
            const { data: workflows } = await github.rest.actions.listRepoWorkflows({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            let totalRuns = 0;
            let successfulRuns = 0;
            let totalDuration = 0;
            let runsWithDuration = 0;
            
            for (const workflow of workflows.workflows) {
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow.id,
                created: `>=${thirtyDaysAgo.toISOString()}`,
                per_page: 100
              });
              
              totalRuns += runs.workflow_runs.length;
              successfulRuns += runs.workflow_runs.filter(run => run.conclusion === 'success').length;
              
              for (const run of runs.workflow_runs) {
                if (run.run_started_at && run.updated_at) {
                  const duration = new Date(run.updated_at) - new Date(run.run_started_at);
                  totalDuration += duration;
                  runsWithDuration++;
                }
              }
            }
            
            const successRate = totalRuns > 0 ? (successfulRuns / totalRuns * 100).toFixed(1) : 0;
            const avgDuration = runsWithDuration > 0 ? Math.round(totalDuration / runsWithDuration / 60000) : 0;
            
            const metrics = {
              total_runs: totalRuns,
              successful_runs: successfulRuns,
              success_rate: successRate,
              avg_duration_minutes: avgDuration,
              period: '30 days'
            };
            
            core.setOutput('metrics', JSON.stringify(metrics));
            return metrics;

      - name: Create metrics report
        run: |
          cat > ci-metrics-report.md << 'EOF'
          # CI/CD Metrics Report
          
          **Period:** Last 30 days  
          **Generated:** $(date -u)
          
          ## Key Metrics
          
          EOF
          
          echo '${{ steps.metrics.outputs.metrics }}' | jq -r '
          "- **Total Workflow Runs:** " + (.total_runs | tostring) + "\n" +
          "- **Successful Runs:** " + (.successful_runs | tostring) + "\n" +
          "- **Success Rate:** " + .success_rate + "%\n" +
          "- **Average Duration:** " + (.avg_duration_minutes | tostring) + " minutes\n"
          ' >> ci-metrics-report.md
          
          echo "" >> ci-metrics-report.md
          echo "## Trends" >> ci-metrics-report.md
          echo "" >> ci-metrics-report.md
          
          SUCCESS_RATE=$(echo '${{ steps.metrics.outputs.metrics }}' | jq -r '.success_rate')
          if (( $(echo "$SUCCESS_RATE > 95" | bc -l) )); then
            echo "‚úÖ **Excellent** - Success rate is above 95%" >> ci-metrics-report.md
          elif (( $(echo "$SUCCESS_RATE > 90" | bc -l) )); then
            echo "üü° **Good** - Success rate is above 90%" >> ci-metrics-report.md
          else
            echo "üî¥ **Needs Attention** - Success rate is below 90%" >> ci-metrics-report.md
          fi

      - name: Upload metrics report
        uses: actions/upload-artifact@v4
        with:
          name: ci-metrics-report
          path: ci-metrics-report.md

      - name: Update repository metrics
        run: |
          echo "## CI/CD Pipeline Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat ci-metrics-report.md >> $GITHUB_STEP_SUMMARY

  # Cleanup old artifacts
  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            let deletedCount = 0;
            
            for (const artifact of artifacts.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < thirtyDaysAgo) {
                try {
                  await github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id
                  });
                  deletedCount++;
                  console.log(`Deleted artifact: ${artifact.name} (${artifact.created_at})`);
                } catch (error) {
                  console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
                }
              }
            }
            
            console.log(`Deleted ${deletedCount} old artifacts`);
            core.summary.addRaw(`Cleaned up ${deletedCount} artifacts older than 30 days`);
            await core.summary.write();
