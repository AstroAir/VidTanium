name: Continuous Integration

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION_DEFAULT: '3.11'
  UV_CACHE_DIR: ~/.cache/uv

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code Quality and Linting
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run ruff linting
        run: |
          uv run ruff check --output-format=github .

      - name: Run ruff formatting check
        run: |
          uv run ruff format --check .

      - name: Run mypy type checking
        run: |
          uv run mypy src/ --config-file mypy.ini

      - name: Check import sorting
        run: |
          uv run ruff check --select I --diff .

  # Unit and Integration Tests
  test:
    name: Tests (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']
        exclude:
          # Reduce matrix size for faster CI
          - os: macos-latest
            python-version: '3.12'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libegl1-mesa libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Install Playwright browsers
        run: |
          uv run playwright install --with-deps chromium

      - name: Run unit tests
        run: |
          uv run pytest tests/ -m "unit" --cov=src --cov-report=xml --cov-report=term-missing --junit-xml=test-results-unit.xml
        env:
          DISPLAY: ':99.0'
          QT_QPA_PLATFORM: offscreen

      - name: Run integration tests
        run: |
          uv run pytest tests/ -m "integration" --cov=src --cov-append --cov-report=xml --cov-report=term-missing --junit-xml=test-results-integration.xml
        env:
          DISPLAY: ':99.0'
          QT_QPA_PLATFORM: offscreen

      - name: Run GUI tests (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          xvfb-run -a uv run pytest tests/ -m "gui" --cov=src --cov-append --cov-report=xml --cov-report=term-missing --junit-xml=test-results-gui.xml
        env:
          QT_QPA_PLATFORM: offscreen

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_VERSION_DEFAULT
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: test-results-*.xml

  # Build and Package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Build package
        run: |
          uv build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Documentation Build Test
  docs-test:
    name: Documentation Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-docs.txt

      - name: Test documentation build
        run: |
          mkdocs build --clean --strict

  # Dependency Check
  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run safety check
        run: |
          uv run pip install safety
          uv run safety check --json --output safety-report.json || true

      - name: Upload safety report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-report
          path: safety-report.json

  # All checks passed
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [code-quality, test, build, docs-test, dependency-check]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.code-quality.result }}" != "success" || 
                "${{ needs.test.result }}" != "success" || 
                "${{ needs.build.result }}" != "success" || 
                "${{ needs.docs-test.result }}" != "success" || 
                "${{ needs.dependency-check.result }}" != "success" ]]; then
            echo "One or more checks failed"
            exit 1
          fi
          echo "All checks passed successfully!"
