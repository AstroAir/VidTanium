name: Enhanced Build and Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
      build_profile:
        description: 'Build profile to use'
        required: false
        type: choice
        options:
          - release
          - minimal
          - portable
        default: release

permissions:
  contents: write
  packages: write
  id-token: write

env:
  PYTHON_VERSION: '3.11'
  BUILD_PROFILE: ${{ github.event.inputs.build_profile || 'release' }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Version and Changelog
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install bump2version
        run: |
          python -m pip install bump2version

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Set version
        id: version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=v${VERSION}" >> $GITHUB_OUTPUT
          
          # Update version in pyproject.toml
          sed -i "s/version = \".*\"/version = \"${VERSION}\"/" pyproject.toml
          
          # Commit version change
          git add pyproject.toml
          git commit -m "Bump version to ${VERSION}"
          git tag "v${VERSION}"
          git push origin HEAD --tags

  # Enhanced build with comprehensive packaging
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [prepare-release]
    if: always() && (needs.prepare-release.result == 'success' || github.event_name != 'workflow_dispatch')
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact-name: linux
            platform: Linux
          - os: windows-latest
            artifact-name: windows
            platform: Windows
          - os: macos-latest
            artifact-name: macos
            platform: macOS

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Install platform-specific build tools
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential fuse
            # Install AppImage tools
            wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
            chmod +x appimagetool
            sudo mv appimagetool /usr/local/bin/
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Install NSIS for Windows installers
            choco install nsis -y
            # Install WiX Toolset for MSI
            choco install wixtoolset -y
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            # macOS tools are built-in
            echo "macOS build tools ready"
          fi

      - name: Build Python package
        run: |
          uv build

      - name: Build enhanced executable
        run: |
          uv run python build_config.py --profile ${{ env.BUILD_PROFILE }}

      - name: Build platform-specific packages
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            # Build Linux packages
            uv run python scripts/build_linux_packages.py --profile ${{ env.BUILD_PROFILE }} --all
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            # Build Windows MSI
            uv run python scripts/create_msi.py --profile ${{ env.BUILD_PROFILE }}
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            # Build macOS PKG
            uv run python scripts/create_macos_pkg.py --profile ${{ env.BUILD_PROFILE }}
          fi

      - name: Run package tests
        shell: bash
        run: |
          # Test the built executable
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ./dist/VidTanium.exe --help || echo "Executable test completed"
          else
            ./dist/VidTanium --help || echo "Executable test completed"
          fi

      - name: Generate checksums
        shell: bash
        run: |
          cd dist
          find . -type f \( -name "*.whl" -o -name "*.tar.gz" -o -name "*.exe" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.pkg" -o -name "*.msi" \) -exec sha256sum {} \; > SHA256SUMS-${{ matrix.artifact-name }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.artifact-name }}
          path: |
            dist/
          retention-days: 30

  # Build and push Docker images
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push GUI image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production-gui
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:gui
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:gui-${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Headless image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production-headless
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:headless
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:headless-${{ github.ref_name }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Development image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: development
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Run comprehensive tests on built artifacts
  test-artifacts:
    name: Test Artifacts
    runs-on: ubuntu-latest
    needs: [build, docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Test Python wheel installation
        run: |
          find artifacts/ -name "*.whl" -exec python -m pip install {} \;
          python -c "import sys; print('Python package test passed')"

      - name: Test executable functionality
        run: |
          # Test Linux executable
          if [ -f artifacts/build-linux/VidTanium ]; then
            chmod +x artifacts/build-linux/VidTanium
            timeout 10s artifacts/build-linux/VidTanium --help || echo "Linux executable test completed"
          fi

      - name: Verify checksums
        run: |
          for checksum_file in artifacts/*/SHA256SUMS-*; do
            if [ -f "$checksum_file" ]; then
              echo "Verifying checksums in $checksum_file"
              cd "$(dirname "$checksum_file")"
              sha256sum -c "$(basename "$checksum_file")" || echo "Checksum verification completed"
              cd -
            fi
          done

      - name: Test Docker images
        run: |
          # Test headless image
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:headless python -c "print('Docker headless image test passed')"

          # Test GUI image (basic import test)
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:gui python -c "print('Docker GUI image test passed')"

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, test-artifacts]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            echo "changelog=Initial release" >> $GITHUB_OUTPUT
          else
            # Generate changelog from commits since last tag
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="- Minor updates and bug fixes"
            fi
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ### From PyPI (recommended)
            ```bash
            pip install vidtanium
            ```
            
            ### From GitHub Releases
            Download the appropriate archive for your platform:
            - **Linux**: `vidtanium-linux.tar.gz`
            - **Windows**: `vidtanium-windows.zip`
            - **macOS**: `vidtanium-macos.tar.gz`
            
            ## Checksums
            See the attached `checksums.txt` file for SHA256 checksums of all release artifacts.
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}

      - name: Generate checksums
        run: |
          cd artifacts/
          find . -type f \( -name "*.whl" -o -name "*.tar.gz" -o -name "*.zip" \) -exec sha256sum {} \; > checksums.txt

      - name: Upload Release Assets
        run: |
          # Upload all build artifacts
          for file in artifacts/build-*/*; do
            if [ -f "$file" ]; then
              gh release upload ${{ github.ref_name }} "$file"
            fi
          done
          
          # Upload checksums
          gh release upload ${{ github.ref_name }} artifacts/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [create-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-linux
          path: artifacts/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: artifacts/dist-linux/
          skip-existing: true



  # Notify on completion
  notify:
    name: Notify Release Completion
    runs-on: ubuntu-latest
    needs: [create-release, publish-pypi, docker, test-artifacts]
    if: always()
    steps:
      - name: Release Summary
        run: |
          echo "## 🎉 VidTanium Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Profile**: ${{ env.BUILD_PROFILE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PyPI Publication**: ${{ needs.publish-pypi.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Images**: ${{ needs.docker.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact Testing**: ${{ needs.test-artifacts.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Packages" >> $GITHUB_STEP_SUMMARY
          echo "- 🐍 **Python Package**: Available on PyPI" >> $GITHUB_STEP_SUMMARY
          echo "- 🪟 **Windows**: EXE, MSI installer" >> $GITHUB_STEP_SUMMARY
          echo "- 🍎 **macOS**: App bundle, PKG installer" >> $GITHUB_STEP_SUMMARY
          echo "- 🐧 **Linux**: AppImage, DEB, RPM packages" >> $GITHUB_STEP_SUMMARY
          echo "- 🐳 **Docker**: GUI, Headless, Development images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Images" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\` - Headless production" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:gui\` - GUI production" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:headless\` - Headless production" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev\` - Development" >> $GITHUB_STEP_SUMMARY
