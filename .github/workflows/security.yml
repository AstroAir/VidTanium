name: Security and Code Quality

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run pip-audit
        run: |
          uv run pip install pip-audit
          uv run pip-audit --format=json --output=pip-audit-report.json || true

      - name: Run safety check
        run: |
          uv run pip install safety
          uv run safety check --json --output=safety-report.json || true

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-reports
          path: |
            pip-audit-report.json
            safety-report.json

  # Bandit Security Linting
  bandit:
    name: Bandit Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install bandit
        run: |
          python -m pip install bandit[toml]

      - name: Run bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt

      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # Semgrep Static Analysis
  semgrep:
    name: Semgrep Static Analysis
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    if: (github.actor != 'dependabot[bot]')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: |
          semgrep --config=auto --json --output=semgrep-report.json src/ || true
          semgrep --config=auto src/

      - name: Upload Semgrep report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-report
          path: semgrep-report.json

  # License Compliance Check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Install pip-licenses
        run: |
          uv run pip install pip-licenses

      - name: Check licenses
        run: |
          uv run pip-licenses --format=json --output-file=licenses.json
          uv run pip-licenses --format=plain-vertical

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  # Code Complexity Analysis
  complexity:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install analysis tools
        run: |
          python -m pip install radon xenon

      - name: Run radon complexity analysis
        run: |
          radon cc src/ --json > radon-cc.json || true
          radon cc src/ --show-complexity --min=B

      - name: Run radon maintainability analysis
        run: |
          radon mi src/ --json > radon-mi.json || true
          radon mi src/ --show --min=B

      - name: Run xenon complexity check
        run: |
          xenon --max-absolute B --max-modules B --max-average A src/ || true

      - name: Upload complexity reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: complexity-reports
          path: |
            radon-cc.json
            radon-mi.json

  # SAST with Snyk (if token is available)
  snyk:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    if: ${{ secrets.SNYK_TOKEN != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-report.json

      - name: Upload Snyk report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-report
          path: snyk-report.json

  # Aggregate Security Report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, bandit, semgrep, license-check, complexity]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          # Check if reports exist and add status
          if [ -f "vulnerability-reports/pip-audit-report.json" ]; then
            echo "- ✅ Dependency vulnerability scan completed" >> security-summary.md
          else
            echo "- ❌ Dependency vulnerability scan failed" >> security-summary.md
          fi
          
          if [ -f "bandit-report/bandit-report.json" ]; then
            echo "- ✅ Bandit security scan completed" >> security-summary.md
          else
            echo "- ❌ Bandit security scan failed" >> security-summary.md
          fi
          
          if [ -f "semgrep-report/semgrep-report.json" ]; then
            echo "- ✅ Semgrep static analysis completed" >> security-summary.md
          else
            echo "- ❌ Semgrep static analysis failed" >> security-summary.md
          fi
          
          if [ -f "license-report/licenses.json" ]; then
            echo "- ✅ License compliance check completed" >> security-summary.md
          else
            echo "- ❌ License compliance check failed" >> security-summary.md
          fi
          
          if [ -f "complexity-reports/radon-cc.json" ]; then
            echo "- ✅ Code complexity analysis completed" >> security-summary.md
          else
            echo "- ❌ Code complexity analysis failed" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "## Next Steps" >> security-summary.md
          echo "Review the individual reports for detailed findings and recommendations." >> security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
