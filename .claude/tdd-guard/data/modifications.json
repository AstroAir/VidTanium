{
  "session_id": "aac87ba6-53fc-4eff-adbe-99ca66d21b47",
  "transcript_path": "C:\\Users\\Max Qian\\.claude\\projects\\d--Project-VidTanium\\aac87ba6-53fc-4eff-adbe-99ca66d21b47.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Write",
  "tool_input": {
    "file_path": "d:\\Project\\VidTanium\\src\\gui\\widgets\\dashboard\\dashboard_interface.py",
    "content": "\"\"\"\nEnhanced Dashboard interface with responsive design and modern aesthetics\n\"\"\"\nfrom typing import Optional, TYPE_CHECKING\nfrom PySide6.QtWidgets import (\n    QWidget, QVBoxLayout, QHBoxLayout\n)\nfrom PySide6.QtCore import QTimer, QObject, Qt\nfrom qfluentwidgets import (\n    SmoothScrollArea\n)\n\nfrom ...utils.theme import VidTaniumTheme\nfrom ...utils.responsive import ResponsiveWidget, ResponsiveManager, ResponsiveLayout\nfrom ...utils.unified_design_system import UnifiedDesignSystem as DS\nfrom .hero_section import EnhancedDashboardHeroSection\nfrom .stats_section import EnhancedDashboardStatsSection\nfrom .task_preview import DashboardTaskPreview\nfrom .system_status import EnhancedDashboardSystemStatus\nfrom loguru import logger\n\nif TYPE_CHECKING:\n    from ...main_window import MainWindow\n\n\nclass EnhancedDashboardInterface(ResponsiveWidget):\n    \"\"\"Enhanced Dashboard interface with responsive design and modern theming integration\n\n    Features:\n    - Comprehensive theme integration with EnhancedThemeManager\n    - Responsive design that adapts to different screen sizes\n    - Modern animations and smooth transitions\n    - Performance-optimized updates and rendering\n    - Enhanced component integration\n    \"\"\"\n\n    def __init__(self, main_window: \"MainWindow\", theme_manager=None) -> None:\n        super().__init__()\n        self.main_window = main_window\n        self.theme_manager = theme_manager\n        self.responsive_manager = ResponsiveManager.instance()\n\n        # Component instances\n        self.hero_section: Optional[EnhancedDashboardHeroSection] = None\n        self.stats_section: Optional[EnhancedDashboardStatsSection] = None\n        self.task_preview: Optional[DashboardTaskPreview] = None\n        self.system_status: Optional[EnhancedDashboardSystemStatus] = None\n\n        # Layout containers\n        self.main_container: Optional[QWidget] = None\n        self.content_layout: Optional[QHBoxLayout] = None\n        self._layout_mode = 'horizontal'\n\n        # Animation timer for dynamic effects\n        self.animation_timer = QTimer()\n        self.animation_timer.timeout.connect(self._update_animations)\n        self.animation_timer.start(2000)  # Update every 2 seconds\n\n    def create_interface(self) -> QWidget:\n        \"\"\"Create the enhanced dashboard interface with responsive design\"\"\"\n        interface = SmoothScrollArea()\n        interface.setWidgetResizable(True)\n        interface.setObjectName(\"dashboard_scroll_area\")\n\n        # Apply enhanced styling\n        self._apply_interface_styling(interface)\n\n        # Main container with responsive layout\n        self.main_container = QWidget()\n        main_layout = QVBoxLayout(self.main_container)\n\n        # Responsive margins based on breakpoint\n        self._setup_responsive_margins(main_layout)\n        main_layout.setSpacing(20)\n\n        # Create component instances with enhanced theming\n        self.hero_section = EnhancedDashboardHeroSection(self.main_window, self.theme_manager)\n        main_layout.addWidget(self.hero_section)\n\n        # Statistics dashboard with enhanced theming\n        self.stats_section = EnhancedDashboardStatsSection(self.main_window, self.theme_manager)\n        main_layout.addWidget(self.stats_section)\n\n        # Content cards section with adaptive layout\n        self._setup_content_section(main_layout)\n\n        # Add stretch at the bottom to push content up\n        main_layout.addStretch()\n\n        interface.setWidget(self.main_container)\n\n        # Register for responsive updates\n        self.responsive_manager.register_widget(interface)\n\n        return interface\n\n    def _apply_interface_styling(self, interface: SmoothScrollArea) -> None:\n        \"\"\"Apply enhanced styling to the interface\"\"\"\n        # Use unified design system for clean, minimalist styling\n        background = DS.color('surface')\n\n        interface.setStyleSheet(f\"\"\"\n            SmoothScrollArea {{\n                background-color: {background};\n                border: none;\n            }}\n            SmoothScrollArea QScrollBar:vertical {{\n                background: transparent;\n                width: 8px;\n                border-radius: 4px;\n            }}\n            SmoothScrollArea QScrollBar::handle:vertical {{\n                background: {DS.color('outline_variant')};\n                border-radius: 4px;\n                min-height: 20px;\n            }}\n            SmoothScrollArea QScrollBar::handle:vertical:hover {{\n                background: {DS.color('outline')};\n            }}\n        \"\"\")\n\n    def _setup_responsive_margins(self, layout: QVBoxLayout) -> None:\n        \"\"\"Setup responsive margins based on current breakpoint\"\"\"\n        current_bp = self.responsive_manager.get_current_breakpoint()\n\n        margin_config = {\n            'xs': DS.spacing('sm'),\n            'sm': DS.spacing('sm'),\n            'md': DS.spacing('md'),\n            'lg': DS.spacing('md'),\n            'xl': DS.spacing('lg'),\n            'xxl': DS.spacing('lg')\n        }\n\n        margin = margin_config.get(current_bp.value, DS.spacing('md'))\n        layout.setContentsMargins(margin, margin, margin, margin)\n\n    def _setup_content_section(self, main_layout: QVBoxLayout) -> None:\n        \"\"\"Setup the content section with adaptive layout and enhanced theming\"\"\"\n        # Create task preview and system status cards with enhanced theming\n        self.task_preview = DashboardTaskPreview(self.main_window)\n        self.system_status = EnhancedDashboardSystemStatus(self.main_window, self.theme_manager)\n\n        # Create adaptive layout configuration\n        breakpoint_configs = {\n            'xs': 'vertical',\n            'sm': 'vertical',\n            'md': 'horizontal',\n            'lg': 'horizontal',\n            'xl': 'horizontal',\n            'xxl': 'horizontal'\n        }\n\n        # Create responsive flow layout\n        content_widgets = [self.task_preview, self.system_status]\n        responsive_layout = ResponsiveLayout.create_adaptive_flow(\n            content_widgets,\n            breakpoint_configs,\n            self.main_container\n        )\n\n        main_layout.addLayout(responsive_layout)\n\n    def set_layout_mode(self, mode: str) -> None:\n        \"\"\"Set layout mode for responsive adaptation\"\"\"\n        if mode != self._layout_mode:\n            self._layout_mode = mode\n            logger.debug(f\"Dashboard layout mode changed to: {mode}\")\n            self._adapt_layout_for_mode(mode)\n\n    def _adapt_layout_for_mode(self, mode: str) -> None:\n        \"\"\"Adapt layout based on the specified mode\"\"\"\n        if not self.content_layout or not self.task_preview or not self.system_status:\n            return\n\n        # Clear existing layout\n        while self.content_layout.count():\n            item = self.content_layout.takeAt(0)\n            if item.widget():\n                item.widget().setParent(None)\n\n        if mode == 'vertical':\n            # Stack components vertically on small screens\n            self.content_layout.setDirection(QHBoxLayout.Direction.TopToBottom)\n            self.content_layout.addWidget(self.task_preview)\n            self.content_layout.addWidget(self.system_status)\n        else:\n            # Use horizontal layout on larger screens\n            self.content_layout.setDirection(QHBoxLayout.Direction.LeftToRight)\n            self.content_layout.addWidget(self.task_preview, 2)  # Takes 2/3 of space\n            self.content_layout.addWidget(self.system_status, 1)  # Takes 1/3 of space\n\n    def on_breakpoint_changed(self, breakpoint: str) -> None:\n        \"\"\"Handle responsive breakpoint changes\"\"\"\n        logger.debug(f\"Dashboard adapting to breakpoint: {breakpoint}\")\n\n        # Update margins\n        if self.main_container:\n            layout = self.main_container.layout()\n            if layout and isinstance(layout, QVBoxLayout):\n                self._setup_responsive_margins(layout)\n\n        # Update layout mode\n        if breakpoint in ['xs', 'sm']:\n            self.set_layout_mode('vertical')\n        else:\n            self.set_layout_mode('horizontal')\n\n    def _update_animations(self) -> None:\n        \"\"\"Update dashboard animations and data with performance optimization\"\"\"\n        try:\n            # Check if window is visible to avoid unnecessary updates\n            if not self.main_window.isVisible():\n                return\n\n            # Update components periodically\n            if self.stats_section:\n                self.stats_section.update_statistics()\n            if self.task_preview:\n                self.task_preview.update_task_preview()\n            if self.system_status:\n                self.system_status.update_system_status()\n\n        except Exception as e:\n            logger.error(f\"Error updating dashboard animations: {e}\")\n\n    def update_statistics(self) -> None:\n        \"\"\"Update statistics information - delegates to stats component\"\"\"\n        try:\n            if self.stats_section:\n                self.stats_section.update_statistics()\n        except Exception as e:\n            logger.error(f\"Error updating statistics: {e}\")\n\n    def update_task_preview(self) -> None:\n        \"\"\"Update task preview - delegates to task preview component\"\"\"\n        try:\n            if self.task_preview:\n                self.task_preview.update_task_preview()\n        except Exception as e:\n            logger.error(f\"Error updating task preview: {e}\")\n\n    def update_system_status(self) -> None:\n        \"\"\"Update system status - delegates to system status component\"\"\"\n        try:\n            if self.system_status:\n                self.system_status.update_system_status()\n        except Exception as e:\n            logger.error(f\"Error updating system status: {e}\")\n\n    def update_theme(self, theme_manager=None) -> None:\n        \"\"\"Update theme for all dashboard components\"\"\"\n        if theme_manager:\n            self.theme_manager = theme_manager\n\n        # Update theme for all components\n        if self.hero_section and hasattr(self.hero_section, 'update_theme'):\n            self.hero_section.update_theme(self.theme_manager)\n\n        if self.stats_section and hasattr(self.stats_section, 'update_theme'):\n            self.stats_section.update_theme(self.theme_manager)\n\n        if self.system_status and hasattr(self.system_status, 'update_theme'):\n            self.system_status.update_theme(self.theme_manager)\n\n        # Update interface styling\n        if hasattr(self, 'main_container') and self.main_container:\n            parent_widget = self.main_container.parent()\n            if parent_widget:\n                self._apply_interface_styling(parent_widget)\n\n    def cleanup(self) -> None:\n        \"\"\"Clean up resources\"\"\"\n        try:\n            if self.animation_timer:\n                self.animation_timer.stop()\n            if hasattr(self, 'responsive_manager'):\n                self.responsive_manager.unregister_widget(self)\n        except Exception as e:\n            logger.error(f\"Error cleaning up dashboard: {e}\")\n\n    # Compatibility methods for backward compatibility\n    def update_stats(self) -> None:\n        \"\"\"Update statistics - compatibility method\"\"\"\n        self.update_statistics()\n\n    def update_task_preview_original(self) -> None:\n        \"\"\"Legacy method - kept for compatibility\"\"\"\n        self.update_task_preview()\n\n    def _format_speed(self, speed_bytes_per_sec: float) -> str:\n        \"\"\"Format speed in human-readable format - compatibility method\"\"\"\n        from ...utils.formatters import format_speed\n        return format_speed(speed_bytes_per_sec)\n\n\n# Backward compatibility alias\nDashboardInterface = EnhancedDashboardInterface\n"
  }
}